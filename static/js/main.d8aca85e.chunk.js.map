{"version":3,"sources":["components/Loader/Loader.module.css","redux/actions.js","redux/operations.js","components/Loader/Loader.js","redux/selectors.js","components/Form/form.js","components/ContactList/contactList.js","components/ContactList/contactList.container.js","components/Filter/filter.js","App.js","redux/reduser.js","redux/store.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactsRequest","addContactsSuccess","addContactsError","deleteContactsRequest","deleteContactsSuccess","deleteContactsError","changeFilter","axios","defaults","baseURL","dispatch","a","get","data","name","number","contact","post","then","catch","error","ContId","delete","Load","className","styles","loader","type","color","height","width","timeout","getLoading","state","contacts","loading","getFilter","filter","getVisibleContacts","createSelector","items","normalizedFilter","toLowerCase","includes","Form","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","console","log","props","onSubmit","reset","this","htmlFor","nameInputId","onChange","id","numberInputId","isLoadingTodos","Component","connect","operations","ContactList","onDeleteContact","map","onClick","aria-hidden","event","actions","target","App","fetchContacts","createReducer","_","payload","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","rootReducer","contactReducer","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8aca85e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loader_loader__2ROYr\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const fetchContactsRequest = createAction(\r\n  \"contacts/fetchContactsRequest\"\r\n);\r\nexport const fetchContactsSuccess = createAction(\r\n  \"contacts/fetchContactsSuccess\"\r\n);\r\nexport const fetchContactsError = createAction(\"contacts/fetchContactsError\");\r\n\r\nexport const addContactsRequest = createAction(\"contacts/addContactsRequest\");\r\nexport const addContactsSuccess = createAction(\"contacts/addContactsSuccess\");\r\nexport const addContactsError = createAction(\"contacts/addContactsError\");\r\n\r\nexport const deleteContactsRequest = createAction(\r\n  \"contacts/deleteContactsRequest\"\r\n);\r\nexport const deleteContactsSuccess = createAction(\r\n  \"contacts/deleteContactsSuccess\"\r\n);\r\nexport const deleteContactsError = createAction(\"contacts/deleteContactsError\");\r\n\r\nexport const changeFilter = createAction(\"contacts/changeFilter\");\r\n// const addContact = createAction(\"contacts/add\", (name, number) => ({\r\n//   payload: {\r\n//     id: shortid.generate(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// }));\r\n// const addContact = (name, number) => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id: shortid.generate(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n\r\n// const deleteContact = createAction(\"contacts/delete\");\r\n\r\n// const deleteContact = (contactId) => ({\r\n//   type: types.DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\n// const changeFilter = createAction(\"contacts/changeFilter\");\r\n// {type: \"timer/increment\", payload: 5}\r\n\r\n// const changeFilter = (value) => ({\r\n//   type: types.CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n","import axios from \"axios\";\r\nimport {\r\n  addContactsRequest,\r\n  addContactsSuccess,\r\n  addContactsError,\r\n  deleteContactsRequest,\r\n  deleteContactsSuccess,\r\n  deleteContactsError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n} from \"./actions\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:4040\";\r\n\r\nconst fetchContacts = () => async (dispatch) => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get(\"/contacts\");\r\n\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n\r\n  // axios\r\n  //   .get(\"/contacts\")\r\n  //   .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n  //   .catch((error) => dispatch(fetchContactsError(error)));\r\n};\r\n\r\nconst addContact = (name, number) => (dispatch) => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n\r\n  dispatch(addContactsRequest());\r\n\r\n  axios\r\n    .post(\"/contacts\", contact)\r\n    .then(({ data }) => dispatch(addContactsSuccess(data)))\r\n    .catch((error) => dispatch(addContactsError(error)));\r\n};\r\n\r\nconst deleteContact = (ContId) => (dispatch) => {\r\n  dispatch(deleteContactsRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${ContId}`)\r\n    .then(() => dispatch(deleteContactsSuccess(ContId)))\r\n    .catch((error) => dispatch(deleteContactsError(error)));\r\n};\r\n\r\nexport default {\r\n  fetchContacts,\r\n  addContact,\r\n  deleteContact,\r\n};\r\n","import React from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport styles from \"./Loader.module.css\";\r\n\r\nconst Load = () => {\r\n  return (\r\n    <div className={styles.loader}>\r\n      <Loader\r\n        type=\"Puff\"\r\n        color=\"#629aa9\"\r\n        height={100}\r\n        width={100}\r\n        timeout={3000} //3 secs\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Load;\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nexport const getLoading = (state) => state.contacts.loading;\r\nexport const getFilter = (state) => state.contacts.filter;\r\nexport const getAllCont = (state) => state.contacts.items;\r\n\r\n// export const getVisibleContacts = (state) => {\r\n//   const filter = getFilter(state);\r\n//   const items = getAllCont(state);\r\n//   const normalizedFilter = filter.toLowerCase();\r\n//   return items.filter(({ name }) =>\r\n//     name.toLowerCase().includes(normalizedFilter)\r\n//   );\r\n// };\r\nexport const getVisibleContacts = createSelector(\r\n  [getAllCont, getFilter],\r\n  (items, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return items.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter)\r\n    );\r\n  }\r\n);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport operations from \"../../redux/operations\";\r\nimport Load from \"../Loader/Loader\";\r\nimport { getLoading } from \"../../redux/selectors\";\r\nimport \"./form.scss\";\r\nclass Form extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    const { name, number } = this.state;\r\n    e.preventDefault();\r\n    if (this.state.name || this.state.number !== \"\") {\r\n      console.log(this.state);\r\n      this.props.onSubmit(name, number);\r\n      this.reset();\r\n      return;\r\n    }\r\n\r\n    console.log(\"пустая строка\");\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"wrapper\">\r\n          <header className=\"page-header\">\r\n            <form className=\"user-info-form\" onSubmit={this.handleSubmit}>\r\n              <label className=\"label\" htmlFor={this.nameInputId}>\r\n                Name\r\n                <input\r\n                  className=\"form-input\"\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  value={this.state.name}\r\n                  onChange={this.handleChange}\r\n                  id={this.nameInputId}\r\n                ></input>\r\n              </label>\r\n              <label className=\"label\" htmlFor={this.numberInputId}>\r\n                Number\r\n                <input\r\n                  className=\"form-input\"\r\n                  type=\"text\"\r\n                  name=\"number\"\r\n                  value={this.state.number}\r\n                  onChange={this.handleChange}\r\n                  id={this.numberInputId}\r\n                />\r\n              </label>\r\n\r\n              <button className=\"submit-form-btn\" type=\"submit\">\r\n                Add Contact\r\n              </button>\r\n            </form>\r\n          </header>\r\n        </div>\r\n        {this.props.isLoadingTodos && <Load />}\r\n      </>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  isLoadingTodos: getLoading(state),\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSubmit: (name, number) => dispatch(operations.addContact(name, number)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./contactList.scss\";\r\nimport \"font-awesome/css/font-awesome.min.css\";\r\n\r\nconst ContactList = ({ items, onDeleteContact }) => (\r\n  <div className=\"contacts-info-table\">\r\n    {/* <p>{items}</p> */}\r\n    <ul className=\"list\">\r\n      {items.map(({ id, name, number }) => (\r\n        <li className=\"actions\" key={id}>\r\n          <span className=\"listItemText\">{name}:</span>\r\n          <span className=\"listItemText\">{number}</span>\r\n          <button\r\n            className=\"button\"\r\n            type=\"button\"\r\n            onClick={() => onDeleteContact(id)}\r\n          >\r\n            <i className=\"fa fa-trash\" aria-hidden=\"true\"></i>\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  </div>\r\n);\r\nContactList.propTypes = {\r\n  items: PropTypes.array,\r\n  onDeleteContact: PropTypes.func,\r\n};\r\nexport default ContactList;\r\n\r\n// const mapStateToProps = (state) => {\r\n//   const { filter, items } = state.contacts;\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//   const filtr = items.filter(({ name }) =>\r\n//     name.toLowerCase().includes(normalizedFilter)\r\n//   );\r\n\r\n//   return {\r\n//     items: filtr,\r\n//   };\r\n// };\r\n","import { connect } from \"react-redux\";\r\nimport operations from \"../../redux/operations\";\r\nimport { getVisibleContacts } from \"../../redux/selectors\";\r\nimport ContactList from \"./contactList\";\r\n\r\n// const getVisibleContacts = (items, filter) => {\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//   return items.filter(({ name }) =>\r\n//     name.toLowerCase().includes(normalizedFilter)\r\n//   );\r\n// };\r\n\r\nconst mapStateToProps = (state) => ({\r\n  items: getVisibleContacts(state),\r\n});\r\n\r\n// const mapStateToProps = (state) => {\r\n//   const { filter, items } = state.contacts;\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//   const filtr = items.filter(({ name }) =>\r\n//     name.toLowerCase().includes(normalizedFilter)\r\n//   );\r\n\r\n//   return {\r\n//     items: filtr,\r\n//   };\r\n// };\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onDeleteContact: (id) => dispatch(operations.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./filter.scss\";\r\nimport * as actions from \"../../redux/actions\";\r\nimport { getFilter } from \"../../redux/selectors\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label className=\"filterLabel\">\r\n    Find contacts by name\r\n    <input\r\n      className=\"searchInput\"\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={onChange}\r\n      // onChange={(event = onChange(event.target.value))}\r\n    />\r\n  </label>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChange: (event) => dispatch(actions.changeFilter(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from \"react\";\nimport Form from \"./components/Form/form\";\nimport ContactList from \"./components/ContactList/contactList.container\";\nimport Filter from \"./components/Filter/filter\";\nimport operations from \"./redux/operations\";\nimport { connect } from \"react-redux\";\n\n// import contacts from \"./num.json\";\n\nclass App extends Component {\n  state = {};\n\n  // formSubmitHandler = (name, number) => {\n  //   const { contacts } = this.state;\n\n  //   const newContact = {\n  //     id: shortid.generate(),\n  //     name,\n  //     number,\n  //   };\n  //   if (contacts.find((contact) => contact.name === newContact.name)) {\n  //     alert(`${newContact.name} is already in contacts.`);\n  //     return;\n  //   }\n\n  //   this.setState(({ contacts }) => ({\n  //     contacts: [newContact, ...contacts],\n  //   }));\n  // };\n\n  // changeFilter = (e) => {\n  //   this.setState({ filter: e.currentTarget.value });\n  // };\n\n  // getContacts = () => {\n  //   const { filter, contacts } = this.state;\n  //   const normalizedFilter = filter.toLowerCase();\n\n  //   return contacts.filter((contact) =>\n  //     contact.name.toLowerCase().includes(normalizedFilter)\n  //   );\n  // };\n\n  // deleteContact = (contactId) => {\n  //   this.setState((prevState) => ({\n  //     contacts: prevState.contacts.filter(\n  //       (contact) => contact.id !== contactId\n  //     ),\n  //   }));\n  // };\n\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   // console.log('App componentDidUpdate');\n\n  //   const oldContact = this.state.contacts;\n  //   const newContact = prevState.contacts;\n\n  //   if (oldContact !== newContact) {\n  //     console.log(\"Обновился контакт\");\n  //     localStorage.setItem(\"contacts\", JSON.stringify(oldContact));\n  //   }\n  // }\n\n  render() {\n    // const { filter } = this.state;\n    // const visibleContacts = this.getContacts();\n    return (\n      <>\n        <h1>Phonebook</h1>\n        <Form />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList\n        // contacts={visibleContacts}\n        // onDeleteContact={this.deleteContact}\n        />\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchContacts: () => dispatch(operations.fetchContacts()),\n});\n\nexport default connect(null, mapDispatchToProps)(App);\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n// import actions from \"./actions\";\r\nimport {\r\n  addContactsRequest,\r\n  addContactsSuccess,\r\n  addContactsError,\r\n  deleteContactsRequest,\r\n  deleteContactsSuccess,\r\n  deleteContactsError,\r\n  changeFilter,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n} from \"./actions\";\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactsSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactsSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactsRequest]: () => true,\r\n  [addContactsSuccess]: () => false,\r\n  [addContactsError]: () => false,\r\n  [deleteContactsRequest]: () => true,\r\n  [deleteContactsSuccess]: () => false,\r\n  [deleteContactsError]: () => false,\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst error = createReducer(null, {});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n  error,\r\n});\r\n","// import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport contactReducer from \"./reduser\";\r\nimport logger from \"redux-logger\";\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n  // persistStore,\r\n  // persistReducer,\r\n} from \"redux-persist\";\r\n// import storage from \"redux-persist/lib/storage\";\r\nimport {\r\n  createStore,\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n  combineReducers,\r\n} from \"@reduxjs/toolkit\";\r\n\r\n// const persistConfig = {\r\n//   key: \"tel\",\r\n//   storage,\r\n// };\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: contactReducer,\r\n});\r\n\r\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\nexport default { store };\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactReducer,\r\n// });\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// export default () => {\r\n//   let store = createStore(persistedReducer);\r\n//   let persistor = persistStore(store);\r\n//   return { store, persistor };\r\n// };\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport App from \"./App\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}